// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO "user" (
        first_name,
        last_name,
        phone_number,
        email,
        password
    )
VALUES ($1, $2, $3, $4, $5)
`

type CreateUserParams struct {
	FirstName   string         `json:"first_name"`
	LastName    string         `json:"last_name"`
	PhoneNumber string         `json:"phone_number"`
	Email       sql.NullString `json:"email"`
	Password    string         `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.FirstName,
		arg.LastName,
		arg.PhoneNumber,
		arg.Email,
		arg.Password,
	)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM "user" WHERE phone_number = $1
`

func (q *Queries) DeleteUser(ctx context.Context, phoneNumber string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, phoneNumber)
	return err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT first_name, last_name, phone_number, email
FROM "user"
`

type GetAllUsersRow struct {
	FirstName   string         `json:"first_name"`
	LastName    string         `json:"last_name"`
	PhoneNumber string         `json:"phone_number"`
	Email       sql.NullString `json:"email"`
}

func (q *Queries) GetAllUsers(ctx context.Context) ([]GetAllUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllUsersRow
	for rows.Next() {
		var i GetAllUsersRow
		if err := rows.Scan(
			&i.FirstName,
			&i.LastName,
			&i.PhoneNumber,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT first_name, last_name, phone_number, email, password
from "user"
WHERE phone_number = $1
`

func (q *Queries) GetUser(ctx context.Context, phoneNumber string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, phoneNumber)
	var i User
	err := row.Scan(
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const loginUser = `-- name: LoginUser :one
SELECT first_name, last_name, phone_number, email
from "user"
WHERE phone_number = $1 AND password = $2
`

type LoginUserParams struct {
	PhoneNumber string `json:"phone_number"`
	Password    string `json:"password"`
}

type LoginUserRow struct {
	FirstName   string         `json:"first_name"`
	LastName    string         `json:"last_name"`
	PhoneNumber string         `json:"phone_number"`
	Email       sql.NullString `json:"email"`
}

func (q *Queries) LoginUser(ctx context.Context, arg LoginUserParams) (LoginUserRow, error) {
	row := q.db.QueryRowContext(ctx, loginUser, arg.PhoneNumber, arg.Password)
	var i LoginUserRow
	err := row.Scan(
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.Email,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE "user" 
SET 
first_name = COALESCE($2, first_name),
last_name = COALESCE($3, last_name),
email = COALESCE($4, email),
password = COALESCE($5, password)
WHERE 
phone_number = $1
RETURNING first_name, last_name, phone_number, email
`

type UpdateUserParams struct {
	PhoneNumber string         `json:"phone_number"`
	FirstName   sql.NullString `json:"first_name"`
	LastName    sql.NullString `json:"last_name"`
	Email       sql.NullString `json:"email"`
	Password    sql.NullString `json:"password"`
}

type UpdateUserRow struct {
	FirstName   string         `json:"first_name"`
	LastName    string         `json:"last_name"`
	PhoneNumber string         `json:"phone_number"`
	Email       sql.NullString `json:"email"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (UpdateUserRow, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.PhoneNumber,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Password,
	)
	var i UpdateUserRow
	err := row.Scan(
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.Email,
	)
	return i, err
}
