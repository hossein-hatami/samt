// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: image.sql

package db

import (
	"context"
)

const deleteImage = `-- name: DeleteImage :exec
DELETE FROM "image"
WHERE img = $1
`

func (q *Queries) DeleteImage(ctx context.Context, img string) error {
	_, err := q.db.ExecContext(ctx, deleteImage, img)
	return err
}

const getAllImage = `-- name: GetAllImage :many
SELECT img, is_poster
FROM "image"
WHERE "is_poster" = $1
`

func (q *Queries) GetAllImage(ctx context.Context, isPoster bool) ([]Image, error) {
	rows, err := q.db.QueryContext(ctx, getAllImage, isPoster)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Image
	for rows.Next() {
		var i Image
		if err := rows.Scan(&i.Img, &i.IsPoster); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const uploadImage = `-- name: UploadImage :exec
INSERT INTO "image" (img, is_poster)
VALUES ($1, $2)
`

type UploadImageParams struct {
	Img      string `json:"img"`
	IsPoster bool   `json:"is_poster"`
}

func (q *Queries) UploadImage(ctx context.Context, arg UploadImageParams) error {
	_, err := q.db.ExecContext(ctx, uploadImage, arg.Img, arg.IsPoster)
	return err
}
