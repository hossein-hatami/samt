// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: session.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSessions = `-- name: CreateSessions :one
INSERT INTO "sessions" (
        id,
        phone_number,
        refresh_token,
        is_blocked,
        expired_at
    )
VALUES ($1, $2, $3, $4, $5)
RETURNING id, phone_number, refresh_token, is_blocked, expired_at, created_at
`

type CreateSessionsParams struct {
	ID           uuid.UUID `json:"id"`
	PhoneNumber  string    `json:"phone_number"`
	RefreshToken string    `json:"refresh_token"`
	IsBlocked    bool      `json:"is_blocked"`
	ExpiredAt    time.Time `json:"expired_at"`
}

func (q *Queries) CreateSessions(ctx context.Context, arg CreateSessionsParams) (Sessions, error) {
	row := q.db.QueryRowContext(ctx, createSessions,
		arg.ID,
		arg.PhoneNumber,
		arg.RefreshToken,
		arg.IsBlocked,
		arg.ExpiredAt,
	)
	var i Sessions
	err := row.Scan(
		&i.ID,
		&i.PhoneNumber,
		&i.RefreshToken,
		&i.IsBlocked,
		&i.ExpiredAt,
		&i.CreatedAt,
	)
	return i, err
}

const getSessions = `-- name: GetSessions :one
SELECT id, phone_number, refresh_token, is_blocked, expired_at, created_at
FROM "sessions"
WHERE id = $1
`

func (q *Queries) GetSessions(ctx context.Context, id uuid.UUID) (Sessions, error) {
	row := q.db.QueryRowContext(ctx, getSessions, id)
	var i Sessions
	err := row.Scan(
		&i.ID,
		&i.PhoneNumber,
		&i.RefreshToken,
		&i.IsBlocked,
		&i.ExpiredAt,
		&i.CreatedAt,
	)
	return i, err
}
