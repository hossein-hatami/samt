// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: investor_plan.sql

package db

import (
	"context"
	"database/sql"
)

const createInvestorPlan = `-- name: CreateInvestorPlan :one
INSERT INTO investor_plan (
        phone_number,
        plan_name,
        year_of_plan_registration_date,
        month_of_plan_registration_date,
        day_of_plan_registration_date
    )
VALUES ($1, $2, $3, $4, $5)
RETURNING phone_number, plan_name, year_of_plan_registration_date, month_of_plan_registration_date, day_of_plan_registration_date
`

type CreateInvestorPlanParams struct {
	PhoneNumber                 string `json:"phone_number"`
	PlanName                    string `json:"plan_name"`
	YearOfPlanRegistrationDate  int32  `json:"year_of_plan_registration_date"`
	MonthOfPlanRegistrationDate int32  `json:"month_of_plan_registration_date"`
	DayOfPlanRegistrationDate   int32  `json:"day_of_plan_registration_date"`
}

func (q *Queries) CreateInvestorPlan(ctx context.Context, arg CreateInvestorPlanParams) (InvestorPlan, error) {
	row := q.db.QueryRowContext(ctx, createInvestorPlan,
		arg.PhoneNumber,
		arg.PlanName,
		arg.YearOfPlanRegistrationDate,
		arg.MonthOfPlanRegistrationDate,
		arg.DayOfPlanRegistrationDate,
	)
	var i InvestorPlan
	err := row.Scan(
		&i.PhoneNumber,
		&i.PlanName,
		&i.YearOfPlanRegistrationDate,
		&i.MonthOfPlanRegistrationDate,
		&i.DayOfPlanRegistrationDate,
	)
	return i, err
}

const deleteInvestorPlan = `-- name: DeleteInvestorPlan :exec
DELETE FROM investor_plan
WHERE phone_number = $1
    AND plan_name = $2
    AND year_of_plan_registration_date = $3
    AND month_of_plan_registration_date = $4
    AND day_of_plan_registration_date = $5
`

type DeleteInvestorPlanParams struct {
	PhoneNumber                 string `json:"phone_number"`
	PlanName                    string `json:"plan_name"`
	YearOfPlanRegistrationDate  int32  `json:"year_of_plan_registration_date"`
	MonthOfPlanRegistrationDate int32  `json:"month_of_plan_registration_date"`
	DayOfPlanRegistrationDate   int32  `json:"day_of_plan_registration_date"`
}

func (q *Queries) DeleteInvestorPlan(ctx context.Context, arg DeleteInvestorPlanParams) error {
	_, err := q.db.ExecContext(ctx, deleteInvestorPlan,
		arg.PhoneNumber,
		arg.PlanName,
		arg.YearOfPlanRegistrationDate,
		arg.MonthOfPlanRegistrationDate,
		arg.DayOfPlanRegistrationDate,
	)
	return err
}

const getAllInvestorPlans = `-- name: GetAllInvestorPlans :many
SELECT p.plan_name, p.year_of_plan_registration_date, p.month_of_plan_registration_date, p.day_of_plan_registration_date, plan_capacity, direct_employment, application_of_the_product, selling_price_of_products, analysis_of_the_market_situation, the_amount_of_domestic_production, countrys_need, nominal_capacity_of_existing_active_units, the_nominal_capacity_of_projects_in_progress, technicalknowledgecompany, water, fuel, electricity, land_area, technical_knowledge, type_of_equipment_required, type_and_amount_of_major_raw_materials, the_main_source_of_raw_materials, foreign_exchange_capital, rial_capital, currency, exchange_rate, rial_working_capital, currency_working_capital, period, total_capital, annual_sales, payback_time, image, phone_number, ip.plan_name, ip.year_of_plan_registration_date, ip.month_of_plan_registration_date, ip.day_of_plan_registration_date
FROM "plan" p
    INNER JOIN "investor_plan" ip ON p."plan_name" = ip."plan_name"
    AND p."year_of_plan_registration_date" = ip."year_of_plan_registration_date"
    AND p."month_of_plan_registration_date" = ip."month_of_plan_registration_date"
    AND p."day_of_plan_registration_date" = ip."day_of_plan_registration_date"
WHERE ip."phone_number" = $1
`

type GetAllInvestorPlansRow struct {
	PlanName                               string         `json:"plan_name"`
	YearOfPlanRegistrationDate             int32          `json:"year_of_plan_registration_date"`
	MonthOfPlanRegistrationDate            int32          `json:"month_of_plan_registration_date"`
	DayOfPlanRegistrationDate              int32          `json:"day_of_plan_registration_date"`
	PlanCapacity                           sql.NullString `json:"plan_capacity"`
	DirectEmployment                       sql.NullInt32  `json:"direct_employment"`
	ApplicationOfTheProduct                sql.NullString `json:"application_of_the_product"`
	SellingPriceOfProducts                 sql.NullString `json:"selling_price_of_products"`
	AnalysisOfTheMarketSituation           sql.NullString `json:"analysis_of_the_market_situation"`
	TheAmountOfDomesticProduction          sql.NullString `json:"the_amount_of_domestic_production"`
	CountrysNeed                           sql.NullString `json:"countrys_need"`
	NominalCapacityOfExistingActiveUnits   sql.NullString `json:"nominal_capacity_of_existing_active_units"`
	TheNominalCapacityOfProjectsInProgress sql.NullString `json:"the_nominal_capacity_of_projects_in_progress"`
	Technicalknowledgecompany              sql.NullString `json:"technicalknowledgecompany"`
	Water                                  sql.NullString `json:"water"`
	Fuel                                   sql.NullString `json:"fuel"`
	Electricity                            sql.NullString `json:"electricity"`
	LandArea                               sql.NullString `json:"land_area"`
	TechnicalKnowledge                     sql.NullString `json:"technical_knowledge"`
	TypeOfEquipmentRequired                sql.NullString `json:"type_of_equipment_required"`
	TypeAndAmountOfMajorRawMaterials       sql.NullString `json:"type_and_amount_of_major_raw_materials"`
	TheMainSourceOfRawMaterials            sql.NullString `json:"the_main_source_of_raw_materials"`
	ForeignExchangeCapital                 sql.NullString `json:"foreign_exchange_capital"`
	RialCapital                            sql.NullString `json:"rial_capital"`
	Currency                               sql.NullString `json:"currency"`
	ExchangeRate                           sql.NullInt32  `json:"exchange_rate"`
	RialWorkingCapital                     sql.NullString `json:"rial_working_capital"`
	CurrencyWorkingCapital                 sql.NullString `json:"currency_working_capital"`
	Period                                 sql.NullString `json:"period"`
	TotalCapital                           sql.NullString `json:"total_capital"`
	AnnualSales                            sql.NullString `json:"annual_sales"`
	PaybackTime                            sql.NullString `json:"payback_time"`
	Image                                  sql.NullString `json:"image"`
	PhoneNumber                            string         `json:"phone_number"`
	PlanName_2                             string         `json:"plan_name_2"`
	YearOfPlanRegistrationDate_2           int32          `json:"year_of_plan_registration_date_2"`
	MonthOfPlanRegistrationDate_2          int32          `json:"month_of_plan_registration_date_2"`
	DayOfPlanRegistrationDate_2            int32          `json:"day_of_plan_registration_date_2"`
}

func (q *Queries) GetAllInvestorPlans(ctx context.Context, phoneNumber string) ([]GetAllInvestorPlansRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllInvestorPlans, phoneNumber)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllInvestorPlansRow
	for rows.Next() {
		var i GetAllInvestorPlansRow
		if err := rows.Scan(
			&i.PlanName,
			&i.YearOfPlanRegistrationDate,
			&i.MonthOfPlanRegistrationDate,
			&i.DayOfPlanRegistrationDate,
			&i.PlanCapacity,
			&i.DirectEmployment,
			&i.ApplicationOfTheProduct,
			&i.SellingPriceOfProducts,
			&i.AnalysisOfTheMarketSituation,
			&i.TheAmountOfDomesticProduction,
			&i.CountrysNeed,
			&i.NominalCapacityOfExistingActiveUnits,
			&i.TheNominalCapacityOfProjectsInProgress,
			&i.Technicalknowledgecompany,
			&i.Water,
			&i.Fuel,
			&i.Electricity,
			&i.LandArea,
			&i.TechnicalKnowledge,
			&i.TypeOfEquipmentRequired,
			&i.TypeAndAmountOfMajorRawMaterials,
			&i.TheMainSourceOfRawMaterials,
			&i.ForeignExchangeCapital,
			&i.RialCapital,
			&i.Currency,
			&i.ExchangeRate,
			&i.RialWorkingCapital,
			&i.CurrencyWorkingCapital,
			&i.Period,
			&i.TotalCapital,
			&i.AnnualSales,
			&i.PaybackTime,
			&i.Image,
			&i.PhoneNumber,
			&i.PlanName_2,
			&i.YearOfPlanRegistrationDate_2,
			&i.MonthOfPlanRegistrationDate_2,
			&i.DayOfPlanRegistrationDate_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllInvestors = `-- name: GetAllInvestors :many
SELECT u."first_name",
    u."last_name",
    u."email",
    u."phone_number"
FROM "user" u
    INNER JOIN "investor_plan" ip ON u."phone_number" = ip."phone_number"
`

type GetAllInvestorsRow struct {
	FirstName   string         `json:"first_name"`
	LastName    string         `json:"last_name"`
	Email       sql.NullString `json:"email"`
	PhoneNumber string         `json:"phone_number"`
}

func (q *Queries) GetAllInvestors(ctx context.Context) ([]GetAllInvestorsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllInvestors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllInvestorsRow
	for rows.Next() {
		var i GetAllInvestorsRow
		if err := rows.Scan(
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.PhoneNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllPlansInvestor = `-- name: GetAllPlansInvestor :many
SELECT u."first_name",
    u."last_name",
    u."email",
    u."phone_number"
FROM "user" u
    INNER JOIN "investor_plan" ip ON ip."phone_number" = u."phone_number"
WHERE ip."plan_name" = $1
    AND ip."year_of_plan_registration_date" = $2
    AND ip."month_of_plan_registration_date" = $3
    AND ip."day_of_plan_registration_date" = $4
`

type GetAllPlansInvestorParams struct {
	PlanName                    string `json:"plan_name"`
	YearOfPlanRegistrationDate  int32  `json:"year_of_plan_registration_date"`
	MonthOfPlanRegistrationDate int32  `json:"month_of_plan_registration_date"`
	DayOfPlanRegistrationDate   int32  `json:"day_of_plan_registration_date"`
}

type GetAllPlansInvestorRow struct {
	FirstName   string         `json:"first_name"`
	LastName    string         `json:"last_name"`
	Email       sql.NullString `json:"email"`
	PhoneNumber string         `json:"phone_number"`
}

func (q *Queries) GetAllPlansInvestor(ctx context.Context, arg GetAllPlansInvestorParams) ([]GetAllPlansInvestorRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllPlansInvestor,
		arg.PlanName,
		arg.YearOfPlanRegistrationDate,
		arg.MonthOfPlanRegistrationDate,
		arg.DayOfPlanRegistrationDate,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllPlansInvestorRow
	for rows.Next() {
		var i GetAllPlansInvestorRow
		if err := rows.Scan(
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.PhoneNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
